scriptencoding utf-8
" Enhance command-line completion
set wildmenu
" tmux termguicolors support
if (has('termguicolors'))
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif
" Optimize for fast terminal connections
set ttyfast
" Highlight current line
set cursorline
" Highlight searches
set hlsearch
" Ignore case of searches
set ignorecase
" Show the current mode
set noshowmode
" Show the filename in the window titlebar
set title
" undo history size
set history=10000
" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set matchtime=2
" Use OS X clipboard
set clipboard=unnamed

" Colorscheme settings
"let g:rehash256 = 1
"set t_Co=256
" 256 colors in terminal (only some supported) and modern (n)vim
" https://github.com/morhetz/gruvbox/wiki/Terminal-specific

set background=dark
"let g:molokai_original = 1
"colorscheme molokai
" colorscheme apprentice
let g:nord_italic = 1
let g:nord_italic_comments = 1
" let g:nord_comment_brightness = 12
colorscheme nord
" better matching brackets colors for apprentice
"hi MatchParen cterm=bold ctermbg=DarkBlue ctermfg=none

" highlight all the column after the 80th
" highlight ColorColumn ctermbg=235 guibg=#2c2d27
highlight ColorColumn ctermbg=235 guibg=#2c2d27
let &colorcolumn=join(range(81,999),',')

" Fix Goyo custom color when deactivete it
function! s:patch_apprentice_colors()
	"hi MatchParen cterm=bold ctermbg=DarkBlue ctermfg=none
	hi SignColumn ctermbg=233
	highlight GitGutterAdd ctermbg=233
	highlight GitGutterChange ctermbg=233
	highlight GitGutterDelete ctermbg=233
	highlight GitGutterChangeDelete ctermbg=233
	hi Noise ctermfg=LightYellow
	highlight ColorColumn ctermbg=235 guibg=#2c2d27
	" highlight SyntasticErrorSign ctermfg=red ctermbg=233
	" highlight SyntasticWarningSign ctermfg=yellow ctermbg=233
endfunction
" Call fix to goyo custom color when switching back to normal mode
augroup patchAprenticeColors
	autocmd! ColorScheme apprentice call s:patch_apprentice_colors()
augroup END

" ESLint with syntastic on file open
" let g:syntastic_check_on_open							= 1
" let g:syntastic_always_populate_loc_list	= 1
" let g:syntastic_enable_signs							= 1
" let g:syntastic_enable_highlighting				= 1
" let g:syntastic_cpp_check_header					= 1
" let g:syntastic_enable_balloons						= 1
" let g:syntastic_echo_current_error				= 1
" let g:syntastic_check_on_wq								= 0
" let g:syntastic_error_symbol							= '✘'
" let g:syntastic_warning_symbol						= '!'
" let g:syntastic_style_error_symbol				= ':('
" let g:syntastic_style_warning_symbol			= ':('
" let g:syntastic_vim_checkers							= ['vint']
" let g:syntastic_elixir_checkers						= ['elixir']
" let g:syntastic_python_checkers						= ['flake8']
" let g:syntastic_enable_elixir_checker			= 0

" let g:syntastic_javascript_eslint_generic = 1
" let g:syntastic_javascript_eslint_exec		= 'xo'
" let g:syntastic_javascript_eslint_args		= '--reporter=compact'
" let g:syntastic_javascript_checkers				= ['xo']

" highlight SyntasticErrorSign ctermfg=red ctermbg=233
" highlight SyntasticWarningSign ctermfg=yellow ctermbg=233

if filereadable(expand('~/.vimrc.lightline'))
	source ~/.vimrc.lightline
endif

"au FileType javascript call JavaScriptFold()
au BufNewFile,BufRead *.ejs set filetype=html

" Automatically wrap at 80 characters for LaTeX
autocmd BufRead,BufNewFile *.tex setlocal tw=80 fo=cq wm=0

" YAML frontmatter in markdown files (jekyll, middleman)
let g:vim_markdown_frontmatter=1

let g:jsx_ext_required = 0 " Allow JSX in normal JS files"

" Automatically Jsonlint json files with syntastic
" au BufRead,BufNewFile *.json set filetype=json

" Settings for Dirvish
augroup dirvishSettings
	autocmd!
	" enable :Gstatus and fugitive stuff
	autocmd FileType dirvish call fugitive#detect(@%)
	" sort: first folders
	autocmd FileType dirvish sort r /[^\/]$/
augroup END

" keybindings for FZF
let g:fzf_nvim_statusline = 0 " disable statusline overwriting
"nnoremap <silent> <leader><space> :Files<CR>
noremap <C-p> :<C-u>Files<CR>
noremap <C-b> :<C-u>Buffers<CR>

"nnoremap <silent> <leader>a :Buffers<CR>
nnoremap <silent> <leader>; :BLines<CR>
nnoremap <silent> <leader>. :Lines<CR>
nnoremap <silent> <leader>o :BTags<CR>
nnoremap <silent> <leader>O :Tags<CR>
nnoremap <silent> <leader>? :History<CR>
nnoremap <silent> <leader>/ :execute 'Ag ' . input('Ag/')<CR>
nnoremap <silent> K :call SearchWordWithAg()<CR>
vnoremap <silent> K :call SearchVisualSelectionWithAg()<CR>
nnoremap <silent> <leader>gl :Commits<CR>
nnoremap <silent> <leader>ga :BCommits<CR>

imap <C-x><C-f> <plug>(fzf-complete-file-ag)
imap <C-x><C-l> <plug>(fzf-complete-line)

function! SearchWordWithAg()
	execute 'Ag' expand('<cword>')
endfunction

function! SearchVisualSelectionWithAg() range
	let l:old_reg = getreg('"')
	let l:old_regtype = getregtype('"')
	let l:old_clipboard = &clipboard
	set clipboard&
	normal! "gvy
	let l:selection = getreg('"')
	call setreg('"', l:old_reg, l:old_regtype)
	let &clipboard = l:old_clipboard
	execute 'Ag' l:selection
endfunction

" delimitMate config
let g:delimitMate_expand_cr = 2
let g:delimitMate_expand_space = 1 " {|} => { | }

" ----------------------------------------------------------------------------
"  " vim-fugitive
"  "
"  ----------------------------------------------------------------------------
  
let g:fugitive_git_executable = 'LANG=en_US.UTF-8 git'

nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>ge :Gedit<CR>
nnoremap <silent> <leader>gE :Gedit<space>
nnoremap <silent> <leader>gr :Gread<CR>
nnoremap <silent> <leader>gR :Gread<space>
nnoremap <silent> <leader>gw :Gwrite<CR>
nnoremap <silent> <leader>gW :Gwrite!<CR>
nnoremap <silent> <leader>gq :Gwq<CR>
nnoremap <silent> <leader>gQ :Gwq!<CR>

function! ReviewLastCommit()
	if exists('b:git_dir')
		Gtabedit HEAD^{}
		nnoremap <buffer> <silent> q :<C-U>bdelete<CR>
	else
		echo 'No git a git repository:' expand('%:p')
	endif
endfunction
nnoremap <silent> <leader>g` :call ReviewLastCommit()<CR>

augroup fugitiveSettings
	autocmd!
	autocmd FileType gitcommit setlocal nolist
	autocmd BufReadPost fugitive://* setlocal bufhidden=delete
augroup END

set noexpandtab
set preserveindent
set autoindent
set softtabstop=0
set shiftwidth=2
set tabstop=2

"Invisible character colors 
"set list listchars=tab:→\
"set list listchars=eol:↩
"set list listchars=tab:▸·
" set list lcs=tab:\¦\ 

" Indent column symbol
set list lcs=tab:\┊\ 

" Color options for gitgutter symbols and SignColumn
hi SignColumn ctermbg=233
highlight GitGutterAdd ctermbg=233
highlight GitGutterChange ctermbg=233
highlight GitGutterDelete ctermbg=233
highlight GitGutterChangeDelete ctermbg=233

" Color option for brackets in pangloss js (to use with apprentice colorscheme)
hi Noise ctermfg=LightYellow

" ----------------------------------------------------------------------------
" <Leader>c Close quickfix/location window
" ----------------------------------------------------------------------------
nnoremap <leader>c :cclose<bar>lclose<cr>

let g:vimtex_compiler_progname = 'nvr'

let g:vimtex_view_general_viewer
			\ = '/Applications/Skim.app/Contents/SharedSupport/displayline'
let g:vimtex_view_general_options = '-r @line @pdf @tex'

" This adds a callback hook that updates Skim after compilation
let g:vimtex_latexmk_callback_hooks = ['UpdateSkim']
function! UpdateSkim(status)
	if !a:status | return | endif

	let l:out = b:vimtex.out()
	let l:tex = expand('%:p')
	let l:cmd = [g:vimtex_view_general_viewer, '-r']
	if !empty(system('pgrep Skim'))
		call extend(l:cmd, ['-g'])
	endif
	if has('nvim')
		call jobstart(l:cmd + [line('.'), l:out, l:tex])
	elseif has('job')
		call job_start(l:cmd + [line('.'), l:out, l:tex])
	else
		call system(join(l:cmd + [line('.'), shellescape(l:out), shellescape(l:tex)], ' '))
	endif
endfunction

" limelight configuration
let g:limelight_paragraph_span = 1
let g:limelight_priority = -1

" set XO and ESLint as ALE linter
let g:ale_linters = {'javascript': ['xo']}

" set eslint as ALE fixer
let g:ale_fixers = {'javascript': ['prettier-eslint']}

" always show ALE column
let g:ale_sign_column_always = 1

" custom errors and warnings messages in statusline
" let g:ale_statusline_format = ['%#ale_error# ⨉ %d %*', ' %#ale_warning# ⚠ %d %*', '%#ale_info - ok %*']
" let g:ale_statusline_format = ['E•%d', 'W•%d', '']
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

let g:airline#extensions#ale#enabled = 1

" run ALEFix with leader d
" nmap <leader>d <Plug>(ale_fix)

" Use a slightly slimmer error pointer
let g:ale_sign_error = "\uf05e"
hi ALEErrorSign guifg=#DF8C8C ctermfg=red cterm=bold
let g:ale_sign_warning = "\uf071"
hi ALEWarningSign guifg=#F2C38F ctermfg=yellow cterm=bold

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" turn spell check on on markdown and TeX files
autocmd BufNewFile,BufRead *.md,*.mkd,*.markdown,*.tex set spell spelllang=it,en_us

augroup mdtabCopmpletion
	autocmd FileType text,markdown let b:vcm_tab_complete = 'dict'
augroup END

" which-key
nnoremap <silent> <leader>      :<c-u>WhichKey '<Space>'<CR>
